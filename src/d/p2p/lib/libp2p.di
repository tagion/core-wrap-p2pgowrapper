/* Code generated by cmd/cgo; DO NOT EDIT. */

module p2p.lib.libp2p;

import core.stdc.config;
import p2p.lib.helper;

extern (C):

/* package p2p */

/* for ptrdiff_t below */

struct _GoString_
{
    const(char)* p;
    ptrdiff_t n;
}

/* Start of preamble from import "C" comments.  */

/* End of preamble from import "C" comments.  */

/* Start of boilerplate cgo prologue.  */

alias GoInt8 = byte;
alias GoUint8 = ubyte;
alias GoInt16 = short;
alias GoUint16 = ushort;
alias GoInt32 = int;
alias GoUint32 = uint;
alias GoInt64 = long;
alias GoUint64 = ulong;
alias GoInt = long;
alias GoUint = ulong;
alias GoUintptr = c_ulong;
alias GoFloat32 = float;
alias GoFloat64 = double;
alias GoComplex64 = cfloat;
alias GoComplex128 = cdouble;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
alias _check_for_64_bit_pointer_matching_GoInt = char[1];

alias GoString = _GoString_;

alias GoMap = void*;
alias GoChan = void*;

struct GoInterface
{
    void* t;
    void* v;
}

struct GoSlice
{
    void* data;
    GoInt len;
    GoInt cap;
}

/* End of boilerplate cgo prologue.  */

void enableLogger ();

/* Return type for optAddressApi */
struct optAddressApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optAddressApi_return optAddressApi (DBuffer addr);

/* Return type for optNoListenAddrsApi */
struct optNoListenAddrsApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optNoListenAddrsApi_return optNoListenAddrsApi ();

/* Return type for optEnableAutoNATServiceApi */
struct optEnableAutoNATServiceApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableAutoNATServiceApi_return optEnableAutoNATServiceApi ();

/* Return type for optEnableAutoRelayApi */
struct optEnableAutoRelayApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableAutoRelayApi_return optEnableAutoRelayApi ();

/* Return type for optEnableNATPortMapApi */
struct optEnableNATPortMapApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableNATPortMapApi_return optEnableNATPortMapApi ();

/* Return type for optIdentityApi */
struct optIdentityApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optIdentityApi_return optIdentityApi (int seed);

/* Return type for subscribeToRechabiltyEventApi */
struct subscribeToRechabiltyEventApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

subscribeToRechabiltyEventApi_return subscribeToRechabiltyEventApi (void* h, void* handler, DBuffer tid);

/* Return type for subscribeToAddressUpdatedEventApi */
struct subscribeToAddressUpdatedEventApi_return
{
    void* r0; /* prt */
    ErrorCode r1; /* code */
}

subscribeToAddressUpdatedEventApi_return subscribeToAddressUpdatedEventApi (void* h, void* handler, DBuffer tid);
ErrorCode unsubscribeApi (void* subsPtr);

/* Return type for createBackgroundContextApi */
struct createBackgroundContextApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createBackgroundContextApi_return createBackgroundContextApi ();

/* Return type for createMdnsApi */
struct createMdnsApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createMdnsApi_return createMdnsApi (void* ctxPtr, void* nodePtr, GoInt32 time, DBuffer rendezvous);

/* Return type for registerNotifeeApi */
struct registerNotifeeApi_return
{
    void* r0; /* notifeePtr */
    ErrorCode r1; /* code */
}

registerNotifeeApi_return registerNotifeeApi (void* servicePtr, void* handler, DBuffer tid);
ErrorCode unregisterNotifeeApi (void* servicePtr, void* notifeePtr);
ErrorCode stopMdnsApi (void* servicePtr);

/* Return type for createNodeApi */
struct createNodeApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createNodeApi_return createNodeApi (void* ctx, GoSlice opts);
ErrorCode closeNodeApi (void* node);
ErrorCode getNodeIdApi (void* node, void* callback, void* context);
ErrorCode getNodeAddrInfoMarshalApi (void* node, void* callback, void* context);
ErrorCode getNodeAddressesApi (void* node, void* callback, void* context);
ErrorCode getNodePublicAddressApi (void* node, void* callback, void* context);
ErrorCode getAddrInfoMarshalApi (void* node, void* callback, void* context);

/* Return type for handleApi */
struct handleApi_return
{
    void* r0; /* ptr */
    GoUint64 r1; /* id */
    ErrorCode r2; /* code */
}

handleApi_return handleApi (void* node, DBuffer addr, GoSlice pids, GoUint8 marshal);
ErrorCode connectApi (void* node, void* ctx, DBuffer addr, GoUint8 marshal);
ErrorCode listenStreamApi (void* stream, GoUint64 id, void* handler, DBuffer tid, GoInt32 timeout, GoInt32 maxLength);
ErrorCode listenApi (void* node, DBuffer pid, void* handler, DBuffer tid, GoInt32 timeout, GoInt32 maxLength);
ErrorCode listenMatchApi (void* node, DBuffer pid, void* handler, DBuffer tid, GoInt32 timeout, GoInt32 maxLength, GoSlice pids);
ErrorCode closeListenerApi (void* node, DBuffer pid);
ErrorCode writeApi (void* stream, void* data, int dataLen);
ErrorCode closeStreamApi (void* stream);
ErrorCode resetStreamApi (void* stream);
ErrorCode destroyApi (void* ptr);

/* Return type for createAutoNATApi */
struct createAutoNATApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

createAutoNATApi_return createAutoNATApi (void* host, void* ctx, GoSlice opts);

/* Return type for optEnableServiceApi */
struct optEnableServiceApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optEnableServiceApi_return optEnableServiceApi (void* host);

/* Return type for optWithoutStartupDelayApi */
struct optWithoutStartupDelayApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optWithoutStartupDelayApi_return optWithoutStartupDelayApi ();

/* Return type for optWithScheduleApi */
struct optWithScheduleApi_return
{
    void* r0; /* ptr */
    ErrorCode r1; /* code */
}

optWithScheduleApi_return optWithScheduleApi (GoInt32 retryInterval, GoInt32 refreshInterval);
ErrorCode getPublicAddress (void* nat, void* callback, void* context);

/* Return type for getNATStatus */
struct getNATStatus_return
{
    NATStatus r0; /* status */
    ErrorCode r1; /* code */
}

getNATStatus_return getNATStatus (void* nat);
void callGCApi ();

